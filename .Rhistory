factor_cols <- unlist(sapply(df, is.factor))
names(df[,factor_cols])
EDA <- function(df)
{
### Plot Histograms on the canvas####
par(mfrow=c(3,2))
for (i in names(df)){
#print (is.numeric(df[[i]]))
if (is.numeric(df[[i]]))
{
hist(df[[i]], xlab = i, main = paste("Histogram of ", i, sep=" "))
}
}
### Plot Boxplots on the canvas####
par(mfrow=c(3,2))
for (i in names(df)){
#print (is.numeric(df[[i]]))
if (is.numeric(df[[i]]))
{
boxplot(df[[i]], xlab = i, main = paste("Box Plot of ", i, sep=" "))
}
}
### Plot Barplots of Factor variables on the canvas####
par(mfrow=c(3,1))
for (i in names(df)){
#print (is.numeric(df[[i]]))
if (is.factor(df[[i]]))
{
plot(df[[i]], xlab = i, main = paste("Bar Plot of ", i, sep=" "))
}
}
#  (lm.fit <- lm(quality~., data=df))
#  data_set <- list(colnames=colnames, rowcount=rowcount,
#                  stats=stats, cor=cor, lm = lm.fit, lm.summary = summary(lm.fit), df=df)
# return(data_set)
}
transform_vars <-  c("LotFrontage", "LotArea", "MasVnrArea", "TotalBsmtSF", "GrLivArea", "BedroomAbvGr",   "KitchenAbvGr", "Fireplaces", "GarageCars", "WoodDeckSF", "PoolArea",  "MiscVal", "TotalPorchSF", "TotalBathRooms")
as.data.frame(psych::describe(df[transform_vars]))[, c("mean", "median", "sd", "skew", "kurtosis")]
#Exploratory data analysis before transformation
EDA(df[transform_vars])
#Find linear combinations and eliminate them
findLinearCombos(df[c("LotFrontage", "LotArea", "MasVnrArea","TotalBsmtSF", "GrLivArea", "BedroomAbvGr","KitchenAbvGr", "Fireplaces", "GarageCars", "WoodDeckSF", "PoolArea",  "MiscVal", "TotalPorchSF", "TotalBathRooms")])
#Transform variables
preprocessParams <- preProcess(df[transform_vars], method=c("YeoJohnson"))
preprocessParams
preprocessParams$method
transformed_df <- predict(preprocessParams, df)
hist(df$SalePrice)
transformed_df$SalePrice <- log(df$SalePrice)
head(transformed_df)
as.data.frame(psych::describe(transformed_df[transform_vars]))[, c("mean", "median", "sd", "skew", "kurtosis")]
#Exploratory data analysis after transformation
EDA(transformed_df[transform_vars])
corrplot(round(cor(transformed_df[transform_vars]),2), method="number",order="hclust", tl.col="black", tl.srt=45)
factor_cols <- unlist(sapply(transformed_df, is.factor))
names(transformed_df[,factor_cols])
garage_vars <- names(transformed_df[which(names(transformed_df) %like% "%Garage%")])
basement_vars <- names(transformed_df[which(names(transformed_df) %like% "%Bsmt%")])
pool_vars <- names(transformed_df[which(names(transformed_df) %like% "%Pool%")])
porch_vars <- names(transformed_df[which(names(transformed_df) %like% c("%Porch%", "%Deck%"))])
sale_vars <- names(transformed_df[which(names(transformed_df) %like% c("%Sale%", "%Sold"))])
lot_vars <- names(transformed_df[which(names(transformed_df) %like% c("%Lot%", "%Land%"))])
dwelling_vars <- names(transformed_df[which(names(transformed_df) %like% c("%SubClass%", "%Bldg%", "%HouseStyle%", "%Overall%", "%Year%"))])
exterior_vars <- names(transformed_df[which(names(transformed_df) %like% c("%Exter%", "%Roof%", "%MasVnr%", "%Foundation%", "%Street%", "%Alley%", "%PavedDrive%", "%Fence%"))])
utility_vars <- names(transformed_df[which(names(transformed_df) %like% c("%Heat%", "%Utilities%", "%Central%", "%Electrical%"))])
interior_vars <- names(transformed_df[which(names(transformed_df) %like% c("%Room%", "FullBath%", "HalfBath%", "%Kitchen%", "%Fire%", "%AbvGr%", "%Functional%", "%FlrSF%", "%LowQualFinSF%", "%GrLivArea%"))])
misc_vars <- names(transformed_df[which(names(transformed_df) %like% c("%Misc%"))])
zoning_vars <- names(transformed_df[which(names(transformed_df) %like% c("%Zoning%"))])
neighborhood_vars <- names(transformed_df[which(names(transformed_df) %like% c("%Neighborhood%", "Condition%"))])
vars_list = list(garage_vars, basement_vars, pool_vars, porch_vars, sale_vars, lot_vars,
dwelling_vars, exterior_vars, utility_vars, interior_vars, misc_vars,
zoning_vars, neighborhood_vars)
df_var <- as.data.frame(do.call(cbind.fill, c(vars_list, fill = NA)))
colnames(df_var) <-  c("GarageVars", "BasementVars", "PoolVars", "PorchVars", "SaleVars", "LotVars",
"DwellingVars", "ExteriorVars", "UtilityVars", "InteriorVars", "MiscVars",
"ZomingVars", "NeighborhoodVars")
#df_var
#Show the  missing value counts with their column names
#NAcol <- which(colSums(is.na(df)) > 0)
#df_NA <- sort(colSums(sapply(df[NAcol], is.na)), decreasing = TRUE)
#df_NA
## Quick summary ##
#List of garage variables after feature engineering
garage_vars <- setdiff(garage_vars, drop_vars)
as.data.frame(psych::describe(transformed_df[garage_vars]))[, c("mean", "median", "sd", "skew", "kurtosis")]
head(transformed_df[garage_vars])
EDA(transformed_df[garage_vars])
corrplot(round(cor(transformed_df[transform_vars]),2), method="number",order="hclust", tl.col="black", tl.srt=45)
corrplot(round(cor(transformed_df[c(transform_vars, SalePrice)]),2), method="number",order="hclust", tl.col="black", tl.srt=45)
corrplot(round(cor(transformed_df[,c(transform_vars, SalePrice)]),2), method="number",order="hclust", tl.col="black", tl.srt=45)
corrplot(round(cor(transformed_df[c(transform_vars, SalePrice)]),2), method="number",order="hclust", tl.col="black", tl.srt=45)
corrplot(round(cor(transformed_df[,c(transform_vars, SalePrice)]),2), method="number",order="hclust", tl.col="black", tl.srt=45)
trans_df_corr <- round(cor(transformed_df[,c(transform_vars, SalePrice)]),2)
trans_df_corr <- round(cor(transformed_df[,c(transform_vars, "SalePrice")]),2)
corrplot(trans_df_corr, method="number",order="hclust", tl.col="black", tl.srt=45)
trans_df_corr <- round(cor(transformed_df[c(transform_vars, "SalePrice")]),2)
corrplot(trans_df_corr, method="number", tl.col="black", tl.srt=45)
trans_df_corr <- round(cor(transformed_df[c(transform_vars, "SalePrice")]),2)
corrplot(trans_df_corr, method="number",order="hclust", tl.col="black", tl.srt=45)
trans_df_corr <- round(cor(transformed_df[,c(transform_vars, "SalePrice")]),2)
corrplot(trans_df_corr, method="number",order="hclust", tl.col="black", tl.srt=45)
trans_df_corr <- round(cor(transformed_df[,c(transform_vars, "SalePrice")]),2)
corrplot(trans_df_corr, method="number", tl.col="black", tl.srt=45)
trans_df_corr <- round(cor(transformed_df[,c(transform_vars, "SalePrice")]),2)
corrplot(trans_df_corr, method="number", tl.col="black", tl.srt=45)
trans_df_corr <- round(cor(transformed_df[c(transform_vars, "SalePrice")]),2)
corrplot(trans_df_corr, method="number", tl.col="black", tl.srt=45)
trans_df_corr <- cor(transformed_df[c(transform_vars, "SalePrice")])
corrplot(trans_df_corr, method="number", tl.col="black", tl.srt=45)
trans_df_corr <- round(cor(transformed_df[c(transform_vars, "SalePrice")]),2)
head(trans_df_corr)
corrplot(trans_df_corr, method="number", tl.col="black", tl.srt=45)
head(transformed_df$SalPrice)
trans_df_corr <- round(cor(transformed_df[c(transform_vars, "SalePrice")]),2)
head(trans_df_corr)
corrplot(trans_df_corr, method="number", tl.col="black", tl.srt=45)
head(transformed_df$SalePrice)
trans_df_corr <- round(cor(transformed_df[c(transform_vars, "SalePrice")]),2)
head(trans_df_corr)
corrplot(trans_df_corr, method="number", tl.col="black", tl.srt=45)
head(transformed_df$SalePrice)
trans_df_corr <- round(cor(transformed_df[c(transform_vars, "SalePrice")]),2)
trans_df_corr_sorted <- as.matrix(sort(trans_df_corr[,'SalePrice'], decreasing = TRUE))
head(trans_df_corr)
corrplot(trans_df_corr, method="number", tl.col="black", tl.srt=45)
head(transformed_df$SalePrice)
trans_df_corr <- round(cor(transformed_df[c("LotFrontage", "LotArea", "MasVnrArea", "TotalBsmtSF", "GrLivArea", "BedroomAbvGr",   "KitchenAbvGr", "Fireplaces", "GarageCars", "WoodDeckSF", "PoolArea",  "MiscVal", "TotalPorchSF", "TotalBathRooms", "SalePrice")]),2)
trans_df_corr_sorted <- as.matrix(sort(trans_df_corr[,'SalePrice'], decreasing = TRUE))
head(trans_df_corr)
corrplot(trans_df_corr, method="number", tl.col="black", tl.srt=45)
head(transformed_df$SalePrice)
trans_df_corr <- round(cor(df[c("LotFrontage", "LotArea", "MasVnrArea", "TotalBsmtSF", "GrLivArea", "BedroomAbvGr",   "KitchenAbvGr", "Fireplaces", "GarageCars", "WoodDeckSF", "PoolArea",  "MiscVal", "TotalPorchSF", "TotalBathRooms", "SalePrice")]),2)
trans_df_corr_sorted <- as.matrix(sort(trans_df_corr[,'SalePrice'], decreasing = TRUE))
head(trans_df_corr)
corrplot(trans_df_corr, method="number", tl.col="black", tl.srt=45)
head(transformed_df$SalePrice)
trans_df_corr <- round(cor(transformed_df[c(transform_vars, "SalePrice")],use="pairwise.complete.obs"),2)
trans_df_corr_sorted <- as.matrix(sort(trans_df_corr[,'SalePrice'], decreasing = TRUE))
head(trans_df_corr)
corrplot(trans_df_corr, method="number", tl.col="black", tl.srt=45)
head(transformed_df$SalePrice)
trans_df_corr <- round(cor(transformed_df[c(transform_vars, "SalePrice")],use="pairwise.complete.obs"),2)
trans_df_corr_sorted <- as.matrix(sort(trans_df_corr[,'SalePrice'], decreasing = TRUE))
head(trans_df_corr_sorted)
corrplot(trans_df_corr_sorted, method="number", tl.col="black", tl.srt=45)
head(transformed_df$SalePrice)
trans_df_corr <- round(cor(transformed_df[c(transform_vars, "SalePrice")],use="pairwise.complete.obs"),2)
trans_df_corr_sorted <- trans_df_corr(order(trans_df_corr[,'SalePrice'], decreasing = TRUE))
head(transformed_df$SalePrice)
trans_df_corr <- round(cor(transformed_df[c(transform_vars, "SalePrice")],use="pairwise.complete.obs"),2)
trans_df_corr_sorted <- trans_df_corr[order(trans_df_corr[,'SalePrice'], decreasing = TRUE),]
#example[order(example[,1], decreasing = TRUE),]
head(trans_df_corr_sorted)
corrplot(trans_df_corr_sorted, method="number", tl.col="black", tl.srt=45)
head(transformed_df$SalePrice)
trans_df_corr <- round(cor(transformed_df[c(transform_vars, "SalePrice")],use="pairwise.complete.obs"),2)
trans_df_corr_sorted <- trans_df_corr[order(trans_df_corr[,'SalePrice'], ascending = TRUE),]
head(transformed_df$SalePrice)
trans_df_corr <- round(cor(transformed_df[c(transform_vars, "SalePrice")],use="pairwise.complete.obs"),2)
trans_df_corr_sorted <- trans_df_corr[order(trans_df_corr[,'SalePrice'], increasing = TRUE),]
head(transformed_df$SalePrice)
trans_df_corr <- round(cor(transformed_df[c(transform_vars, "SalePrice")],use="pairwise.complete.obs"),2)
trans_df_corr_sorted <- trans_df_corr[order(trans_df_corr[,'SalePrice'], decreasing = FALSE),]
#example[order(example[,1], decreasing = TRUE),]
head(trans_df_corr_sorted)
corrplot(trans_df_corr_sorted, method="number", tl.col="black", tl.srt=45)
head(transformed_df$SalePrice)
trans_df_corr <- round(cor(transformed_df[c(transform_vars, "SalePrice")],use="pairwise.complete.obs"),2)
trans_df_corr_sorted <- trans_df_corr[order(trans_df_corr[,'SalePrice'], decreasing = TRUE),]
#example[order(example[,1], decreasing = TRUE),]
head(trans_df_corr_sorted)
corrplot(trans_df_corr_sorted, method="number", tl.col="black", tl.srt=45)
table(df$PoolArea)
plot(df$PoolArea, df$SalePrice)
boxplot(SalePrice~PoolArea, data=transformed_df)
plot(transformed_df$PoolArea, transformed_df$SalePrice)
boxplot(transformed_df$SalePrice)
head(df$YearBuilt)
head(df$MoSold)
head(df$YearRemodAdd)
View(df)
names(df)
my.dob <- as.Date('1983-10-20')
my.dob
age(my.dob)
type(df$YrSold)
typeof(df$YrSold)
head(df$YearBuilt)
head(df$MoSold)
head(df$YearRemodAdd)
df$Age <- df$YrSold+df$MoSold/12 - df$YearBuilt
head(df$YearBuilt)
head(df$MoSold)
head(df$YearRemodAdd)
df$Age <- df$YrSold+df$MoSold/12 - df$YearBuilt
head(df$Age)
head(df$YearBuilt)
head(df$MoSold)
head(df$YearSold)
df$Age <- df$YrSold+df$MoSold/12 - df$YearBuilt
head(df$Age)
head(df$YearBuilt)
head(df$MoSold)
head(df$YrSold)
df$Age <- df$YrSold+df$MoSold/12 - df$YearBuilt
head(df$Age)
head(df$YearBuilt)
head(df$MoSold)
head(df$YrSold)
df$Age <- round(df$YrSold+df$MoSold/12 - df$YearBuilt,2)
head(df$Age)
df$Age <- round(df$YrSold+df$MoSold/12 - df$YearBuilt,2)
cor(df$SalePrice, df$Age)
df$Age <- round(df$YrSold+df$MoSold/12 - df$YearBuilt,2)
cor(df[, c("SalePrice", "Age")])
df$Age <- round(df$YrSold+df$MoSold/12 - df$YearBuilt,2)
cor(df[, c("SalePrice", "Age")],use="pairwise.complete.obs")
df$Age <- round(df$YrSold+df$MoSold/12 - df$YearBuilt,2)
cor(df[, c("SalePrice", "Age")],use="pairwise.complete.obs")
plot(df$SalePrice, df$Age)
df$Age <- round(df$YrSold+df$MoSold/12 - df$YearBuilt,2)
cor(df[, c("SalePrice", "Age")],use="pairwise.complete.obs")
plot(df$Age, df$SalePrice)
df$Age <- round(df$YrSold+df$MoSold/12 - df$YearBuilt,2)
cor(df[, c("SalePrice", "Age")],use="pairwise.complete.obs")
plot(df$Age, df$SalePrice)
hist(df$Age)
transform_vars <-  c("LotFrontage", "LotArea", "MasVnrArea", "TotalBsmtSF", "GrLivArea", "BedroomAbvGr",   "KitchenAbvGr", "Fireplaces", "GarageCars", "WoodDeckSF", "PoolArea",  "MiscVal", "TotalPorchSF", "TotalBathRooms", "Age")
as.data.frame(psych::describe(df[transform_vars]))[, c("mean", "median", "sd", "skew", "kurtosis")]
#Exploratory data analysis before transformation
EDA(df[transform_vars])
#Find linear combinations and eliminate them
findLinearCombos(df[c("LotFrontage", "LotArea", "MasVnrArea","TotalBsmtSF", "GrLivArea", "BedroomAbvGr","KitchenAbvGr", "Fireplaces", "GarageCars", "WoodDeckSF", "PoolArea",  "MiscVal", "TotalPorchSF", "TotalBathRooms", "Age", "MoSold", "YrSold", "YearBuilt")])
#Transform variables
preprocessParams <- preProcess(df[transform_vars], method=c("YeoJohnson"))
preprocessParams
preprocessParams$method
transformed_df <- predict(preprocessParams, df)
hist(df$SalePrice)
transformed_df$SalePrice <- log(df$SalePrice)
#head(transformed_df)
as.data.frame(psych::describe(transformed_df[transform_vars]))[, c("mean", "median", "sd", "skew", "kurtosis")]
#Exploratory data analysis after transformation
EDA(transformed_df[transform_vars])
#head(transformed_df$SalePrice)
trans_df_corr <- round(cor(transformed_df[c(transform_vars, "SalePrice")],use="pairwise.complete.obs"),2)
trans_df_corr_sorted <- trans_df_corr[order(trans_df_corr[,'SalePrice'], decreasing = TRUE),]
#example[order(example[,1], decreasing = TRUE),]
#head(trans_df_corr_sorted)
corrplot(trans_df_corr_sorted, method="number",type="lower", tl.col="black", tl.srt=45)
cor(df[, c("SalePrice", "Age")],use="pairwise.complete.obs")
plot(df$Age, df$SalePrice)
cor(df[, c("SalePrice", "Age", "MoSold", "YrSold", "YearBuilt")],use="pairwise.complete.obs")
df$Age <- round(df$YrSold+df$MoSold/12 - df$YearBuilt,2)
cor(df[, c("SalePrice", "Age", "MoSold", "YrSold", "YearBuilt")],use="pairwise.complete.obs")
plot(df$Age, df$SalePrice)
hist(df$Age)
drop_vars <- list.append(drop_vars, "MoSold", "YrSold", "YearBuilt")
drop_vars <- unlist(drop_vars)
df <- df[!names(df) %in% drop_vars]
numeric_cols <- unlist(sapply(df, is.numeric))
names(df[,numeric_cols])
factor_cols <- unlist(sapply(df, is.factor))
names(df[,factor_cols])
#head(transformed_df$SalePrice)
trans_df_corr <- round(cor(transformed_df[c(transform_vars, "SalePrice")],use="pairwise.complete.obs"),2)
trans_df_corr_sorted <- trans_df_corr[order(trans_df_corr[,'SalePrice'], decreasing = TRUE),]
#example[order(example[,1], decreasing = TRUE),]
#head(trans_df_corr_sorted)
corrplot(trans_df_corr_sorted, method="number",type="lower", tl.col="black", tl.srt=45)
#Scatter plot matrix of variables
pairs(~SalePrice+Age+LotFrontage+LotArea+MasVnrArea+TotalBsmtSF+GrLivArea+BedroomAbvGr+KitchenAbvGr+Fireplaces+GarageCars+WoodDeckSF+PoolArea+MiscVal+TotalPorchSF+TotalBathRooms,data=transformed_df,
main="Simple Scatterplot Matrix")
#head(transformed_df$SalePrice)
trans_df_corr <- round(cor(transformed_df[c(transform_vars, "SalePrice")],use="pairwise.complete.obs"),2)
trans_df_corr_sorted <- trans_df_corr[order(trans_df_corr[,'SalePrice'], decreasing = TRUE),]
#example[order(example[,1], decreasing = TRUE),]
#head(trans_df_corr_sorted)
corrplot(trans_df_corr_sorted, method="number",type="lower", tl.col="black", tl.srt=45)
#Scatter plot matrix of variables
pairs(~SalePrice+Age+LotFrontage+LotArea+MasVnrArea+TotalBsmtSF,data=transformed_df,
main="Simple Scatterplot Matrix")
pairs(~SalePrice+GrLivArea+BedroomAbvGr+KitchenAbvGr+Fireplaces+GarageCars,data=transformed_df,
main="Simple Scatterplot Matrix")
pairs(~SalePrice+WoodDeckSF+PoolArea+MiscVal+TotalPorchSF+TotalBathRooms,data=transformed_df,
main="Simple Scatterplot Matrix"))
#head(transformed_df$SalePrice)
trans_df_corr <- round(cor(transformed_df[c(transform_vars, "SalePrice")],use="pairwise.complete.obs"),2)
trans_df_corr_sorted <- trans_df_corr[order(trans_df_corr[,'SalePrice'], decreasing = TRUE),]
#example[order(example[,1], decreasing = TRUE),]
#head(trans_df_corr_sorted)
corrplot(trans_df_corr_sorted, method="number",type="lower", tl.col="black", tl.srt=45)
#Scatter plot matrix of variables
pairs(~SalePrice+Age+LotFrontage+LotArea+MasVnrArea+TotalBsmtSF,data=transformed_df,
main="Simple Scatterplot Matrix")
pairs(~SalePrice+GrLivArea+BedroomAbvGr+KitchenAbvGr+Fireplaces+GarageCars,data=transformed_df,
main="Simple Scatterplot Matrix")
pairs(~SalePrice+WoodDeckSF+PoolArea+MiscVal+TotalPorchSF+TotalBathRooms,data=transformed_df,
main="Simple Scatterplot Matrix")
#head(transformed_df$SalePrice)
trans_df_corr <- round(cor(transformed_df[c(transform_vars, "SalePrice")],use="pairwise.complete.obs"),2)
trans_df_corr_sorted <- trans_df_corr[order(trans_df_corr[,'SalePrice'], decreasing = TRUE),]
#example[order(example[,1], decreasing = TRUE),]
#head(trans_df_corr_sorted)
corrplot(trans_df_corr_sorted, method="number", tl.col="black", tl.srt=45)
#Scatter plot matrix of variables
pairs(~SalePrice+Age+LotFrontage+LotArea+MasVnrArea+TotalBsmtSF,data=transformed_df,
main="Simple Scatterplot Matrix")
pairs(~SalePrice+GrLivArea+BedroomAbvGr+KitchenAbvGr+Fireplaces+GarageCars,data=transformed_df,
main="Simple Scatterplot Matrix")
pairs(~SalePrice+WoodDeckSF+PoolArea+MiscVal+TotalPorchSF+TotalBathRooms,data=transformed_df,
main="Simple Scatterplot Matrix")
cor(df$GrLivArea, (df$X1stFlrSF+df$X2ndFlrSF+df$LowQualFinSF))
cor(df$GrLivArea, (df$X1stFlrSF+df$X2ndFlrSF+df$LowQualFinSF))
ncol(df$SalePrice)
#Check variable importance post transformation
set.seed(100)
#check variable importance using random forests
#rf_ranges <- list(ntree=c(500), mtry=5:30)
#rf_tune <- tune(randomForest, SalePrice ~ ., data=df[1:1460,], ranges=rf_ranges)
#rf_tune$best.parameters
#rf_best <- rf_tune$best.model
#rf_best
names(transformed_df)
trans_df_rf <- randomForest(x=transformed_df[1:1460, -"SalePrice"], y=transformed_df$SalePrice[1:1460], ntree=500, importance=TRUE)
#head(transformed_df$SalePrice)
trans_df_corr <- round(cor(transformed_df[c(transform_vars, "SalePrice")],use="pairwise.complete.obs"),2)
trans_df_corr_sorted <- trans_df_corr[order(trans_df_corr[,'SalePrice'], decreasing = TRUE),]
names(trans_df_corr_sorted)
#example[order(example[,1], decreasing = TRUE),]
#head(trans_df_corr_sorted)
corrplot(trans_df_corr_sorted, method="number", tl.col="black", tl.srt=45)
#Scatter plot matrix of variables
pairs(~SalePrice+Age+LotFrontage+LotArea+MasVnrArea,data=transformed_df,
main="Simple Scatterplot Matrix")
pairs(~SalePrice+TotalSF+BedroomAbvGr+KitchenAbvGr+Fireplaces+GarageCars,data=transformed_df,
main="Simple Scatterplot Matrix")
#head(transformed_df$SalePrice)
trans_df_corr <- round(cor(transformed_df[c(transform_vars, "SalePrice")],use="pairwise.complete.obs"),2)
trans_df_corr_sorted <- trans_df_corr[order(trans_df_corr[,'SalePrice'], decreasing = TRUE),]
names(trans_df_corr_sorted)
#example[order(example[,1], decreasing = TRUE),]
#head(trans_df_corr_sorted)
corrplot(trans_df_corr_sorted, method="number", tl.col="black", tl.srt=45)
#Scatter plot matrix of variables
pairs(~SalePrice+Age+LotFrontage+LotArea+MasVnrArea,data=transformed_df,
main="Simple Scatterplot Matrix")
pairs(~SalePrice+TotalSF+BedroomAbvGr+KitchenAbvGr+Fireplaces+GarageCars,data=transformed_df,
main="Simple Scatterplot Matrix")
EDA <- function(df)
{
### Plot Histograms on the canvas####
par(mfrow=c(3,2))
for (i in names(df)){
#print (is.numeric(df[[i]]))
if (is.numeric(df[[i]]))
{
hist(df[[i]], xlab = i, main = paste("Histogram of ", i, sep=" "))
}
}
### Plot Boxplots on the canvas####
par(mfrow=c(3,2))
for (i in names(df)){
#print (is.numeric(df[[i]]))
if (is.numeric(df[[i]]))
{
boxplot(df[[i]], xlab = i, main = paste("Box Plot of ", i, sep=" "))
}
}
### Plot Barplots of Factor variables on the canvas####
par(mfrow=c(3,1))
for (i in names(df)){
#print (is.numeric(df[[i]]))
if (is.factor(df[[i]]))
{
plot(df[[i]], xlab = i, main = paste("Bar Plot of ", i, sep=" "))
}
}
#  (lm.fit <- lm(quality~., data=df))
#  data_set <- list(colnames=colnames, rowcount=rowcount,
#                  stats=stats, cor=cor, lm = lm.fit, lm.summary = summary(lm.fit), df=df)
# return(data_set)
}
transform_vars <-  c("LotFrontage", "LotArea", "MasVnrArea", "TotalSF", "BedroomAbvGr",   "KitchenAbvGr", "Fireplaces", "GarageCars", "WoodDeckSF", "PoolArea",  "MiscVal", "TotalPorchSF", "TotalBathRooms", "Age")
as.data.frame(psych::describe(df[transform_vars]))[, c("mean", "median", "sd", "skew", "kurtosis")]
### Group the factor and integer variables
numeric_cols <- unlist(sapply(df, is.numeric))
names(df[,numeric_cols])
factor_cols <- unlist(sapply(df, is.factor))
names(df[,factor_cols])
#Find linear combinations and eliminate them
findLinearCombos(df[c("LotFrontage", "LotArea", "MasVnrArea","TotalSF", "BedroomAbvGr","KitchenAbvGr", "Fireplaces", "GarageCars", "WoodDeckSF", "PoolArea",  "MiscVal", "TotalPorchSF", "TotalBathRooms")])
### Group the factor and integer variables
numeric_cols <- unlist(sapply(df, is.numeric))
numeric_cols
names(df[,numeric_cols])
factor_cols <- unlist(sapply(df, is.factor))
names(df[,factor_cols])
#Find linear combinations and eliminate them
findLinearCombos(df[c("LotFrontage", "LotArea", "MasVnrArea","TotalSF", "BedroomAbvGr","KitchenAbvGr", "Fireplaces", "GarageCars", "WoodDeckSF", "PoolArea",  "MiscVal", "TotalPorchSF", "TotalBathRooms")])
### Group the factor and integer variables
numeric_cols <- unlist(sapply(df, is.numeric))
numeric_cols
names(df[,numeric_cols])
factor_cols <- unlist(sapply(df, is.factor))
names(df[,factor_cols])
#Find linear combinations and eliminate them
findLinearCombos(df[names(df[,numeric_cols])])
### Group the factor and integer variables
numeric_cols <- unlist(sapply(df, is.numeric))
numeric_cols
names(df[,numeric_cols])
factor_cols <- unlist(sapply(df, is.factor))
names(df[,factor_cols])
#Find linear combinations and eliminate them
findLinearCombos(df[c(names(df[,numeric_cols]))])
### Group the factor and integer variables
numeric_cols <- unlist(sapply(df, is.numeric))
names(df[,numeric_cols])
df[,numeric_cols]
factor_cols <- unlist(sapply(df, is.factor))
names(df[,factor_cols])
#Find linear combinations and eliminate them
findLinearCombos(df[c("LotFrontage", "LotArea", "MasVnrArea","TotalSF", "BedroomAbvGr","KitchenAbvGr", "Fireplaces", "GarageCars", "WoodDeckSF", "PoolArea",  "MiscVal", "TotalPorchSF", "TotalBathRooms")])
### Group the factor and integer variables
numeric_cols <- unlist(sapply(df, is.numeric))
numeric_col_names <- names(df[,numeric_cols])
numeric_col_names
factor_cols <- unlist(sapply(df, is.factor))
names(df[,factor_cols])
#Find linear combinations and eliminate them
findLinearCombos(df[c("LotFrontage", "LotArea", "MasVnrArea","TotalSF", "BedroomAbvGr","KitchenAbvGr", "Fireplaces", "GarageCars", "WoodDeckSF", "PoolArea",  "MiscVal", "TotalPorchSF", "TotalBathRooms")])
### Group the factor and integer variables
numeric_cols <- unlist(sapply(df, is.numeric))
numeric_col_names <- names(df[,numeric_cols])
typeof(numeric_col_names)
factor_cols <- unlist(sapply(df, is.factor))
names(df[,factor_cols])
#Find linear combinations and eliminate them
findLinearCombos(df[c("LotFrontage", "LotArea", "MasVnrArea","TotalSF", "BedroomAbvGr","KitchenAbvGr", "Fireplaces", "GarageCars", "WoodDeckSF", "PoolArea",  "MiscVal", "TotalPorchSF", "TotalBathRooms")])
### Group the factor and integer variables
numeric_cols <- unlist(sapply(df, is.numeric))
numeric_col_names <- list(names(df[,numeric_cols]))
typeof(numeric_col_names)
factor_cols <- unlist(sapply(df, is.factor))
names(df[,factor_cols])
#Find linear combinations and eliminate them
findLinearCombos(df[c("LotFrontage", "LotArea", "MasVnrArea","TotalSF", "BedroomAbvGr","KitchenAbvGr", "Fireplaces", "GarageCars", "WoodDeckSF", "PoolArea",  "MiscVal", "TotalPorchSF", "TotalBathRooms")])
### Group the factor and integer variables
numeric_cols <- unlist(sapply(df, is.numeric))
numeric_col_names <- list(names(df[,numeric_cols]))
typeof(numeric_col_names)
factor_cols <- unlist(sapply(df, is.factor))
names(df[,factor_cols])
#Find linear combinations and eliminate them
findLinearCombos(df[numeric_col_names])
### Group the factor and integer variables
numeric_cols <- unlist(sapply(df, is.numeric))
numeric_col_names <- list(names(df[,numeric_cols]))
typeof(numeric_col_names)
factor_cols <- unlist(sapply(df, is.factor))
names(df[,factor_cols])
#Find linear combinations and eliminate them
findLinearCombos(df[,numeric_col_names])
### Group the factor and integer variables
numeric_cols <- unlist(sapply(df, is.numeric))
numeric_col_names <- names(df[,numeric_cols])
typeof(numeric_col_names)
factor_cols <- unlist(sapply(df, is.factor))
names(df[,factor_cols])
#Find linear combinations and eliminate them
findLinearCombos(df[,numeric_col_names])
### Group the factor and integer variables
numeric_cols <- unlist(sapply(df, is.numeric))
numeric_col_names <- names(df[,numeric_cols])
typeof(numeric_col_names)
factor_cols <- unlist(sapply(df, is.factor))
names(df[,factor_cols])
#Find linear combinations and eliminate them
findLinearCombos(df[numeric_col_names])
### Group the factor and integer variables
numeric_cols <- unlist(sapply(df, is.numeric))
numeric_col_names <- names(df[,numeric_cols])
numeric_col_names
factor_cols <- unlist(sapply(df, is.factor))
names(df[,factor_cols])
#Find linear combinations and eliminate them
findLinearCombos(df[numeric_col_names])
### Group the factor and integer variables
numeric_cols <- unlist(sapply(df, is.numeric))
numeric_col_names <- c(names(df[,numeric_cols]))
numeric_col_names
factor_cols <- unlist(sapply(df, is.factor))
names(df[,factor_cols])
#Find linear combinations and eliminate them
findLinearCombos(df[numeric_col_names])
### Group the factor and integer variables
numeric_cols <- unlist(sapply(df, is.numeric))
numeric_col_names <- c(names(df[,numeric_cols]))
numeric_col_names
factor_cols <- unlist(sapply(df, is.factor))
names(df[,factor_cols])
#Find linear combinations and eliminate them
findLinearCombos(df[,numeric_col_names])
### Group the factor and integer variables
numeric_cols <- unlist(sapply(df, is.numeric))
numeric_col_names <- names(df[,numeric_cols])
typeof(numeric_col_names)
factor_cols <- unlist(sapply(df, is.factor))
names(df[,factor_cols])
#Find linear combinations and eliminate them
findLinearCombos(df[names(df[,numeric_cols])])
